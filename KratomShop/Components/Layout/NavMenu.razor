@implements IDisposable
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
    <ul class="list-unstyled mb-0 d-flex flex-column flex-md-row gap-3 navbar-nav text-center">
        <li>
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                Home
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="about-us" Match="NavLinkMatch.All">
                O nás
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="products" Match="NavLinkMatch.All">
                Produkty
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" id="kontaktId" href="contact" Match="NavLinkMatch.All">
                Kontakt
            </NavLink>
        </li>
        <li>
            <NavLink class="nav-link" href="/Account/Login" Match="NavLinkMatch.All">
                Můj účet
            </NavLink>
        </li>
        <li>
            <a class="btn btn-dark" href="/basket">
                Košík <span class="badge text-bg-light btn-sm">@CartService.GetTotalItemsCount()</span>
            </a>
        </li>
    </ul>

    <AuthorizeView>
        <Authorized>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Account/Manage">
                    <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="nav-link">
                        <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                    </button>
                </form>
            </div>
        </Authorized>
    </AuthorizeView>

@code {
    [Inject]
    private CartService CartService { get; set; } = null!;

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
}

